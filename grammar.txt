code        : NEWLINE? statement (NEWLINE statement)* NEWLINE? EOF

statement   : expr | if-expr | type-choice | for-expr | while-expr

while-expr  : KEYWORD:while atom NEWLINE? statement (NEWLINE statement)* NEWLINE? KEYWORD:end

for-expr    : KEYWORD:for IDENTIFIER EQ atom KEYWORD:to atom (KEYWORD:step atom)?
              NEWLINE? statement (NEWLINE statement)* NEWLINE? KEYWORD:end

type-choice : KEYWORD:choice IDENTIFIER LT (KEYWORD:int|KEYWORD:FLOAT) GT statement

if-expr     : KEYWORD:if atom NEWLINE? statement (NEWLINE statement)* NEWLINE?
              (KEYWORD:elif atom NEWLINE? statement (NEWLINE statement)* NEWLINE?)*
              (KEYWORD:else NEWLINE? statement (NEWLINE statement)* NEWLINE?)? KEYWORD:end

expr        : comp_expr ((KEYWORD:and|KEYWORD:or) comp_expr)*
            : identifier

identifier  : (KEYWORD:static)? IDENTIFIER EQ expr

comp-expr   : KEYWORD:not comp_expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : atom (POW factor)*

atom        : INT|FLOAT|STRING|IDENTIFIER|KEYWORD:True|KEYWORD:False
            : LPAREN expr RPAREN